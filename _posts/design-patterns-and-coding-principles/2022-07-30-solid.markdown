---
layout: post
title:  "SOLID Design Principles"
kicker: "Design Patterns and Coding Principles"
subtitle: "SOLID is a mnemonic acronym that refers to a set of design principles developed for object-oriented programming languages. It makes our code more readable, extensible, and manageable when correctly implemented."
image: assets/images/posts-cover-images/solid-design-principles.jpg
author: senthil
date: 2022-07-30 00:00:00 +0530
tags: ["design-patterns", "singleton-pattern", "coding-principles", "solid"]
categories: design-patterns-and-coding-principles
featured: false
hidden: true
toc: true
draft: true
---

# Overview

The term "SOLID" in software engineering refers to a group of five design principles that are meant to improve the *readability*, *flexibility*, and *maintainability* of object-oriented designs.

The SOLID design principle includes the following five principles:

- **S**ingle-responsibility principle
- **O**pen-closed principle
- **L**iskov substitution principle
- **I**nterface segregation principle
- **D**ependency inversion principle

American software engineer and instructor **Robert C. Martin** (popularly known as **Uncle Bob**) introduced these design principles in his 2000 paper *Design Principles and Design Patterns*. **Michael Feathers** later transformed these principles into an acronym. 

We will examine each of them to learn how these principles can aid in the creation of software that is well-designed.

# Single-Responsibility Principle (SRP)

Robert C. Martin, the originator of this principle, put it this way: "*A class should have only one reason to change.*" It means that every module, class, or method should only have one (single) responsibility or job.

|![Single-Reponsibility Principle](/assets/images/posts/solid-srp.jpg)|
|:-:|
|<sub>*SOLID - Single-Reponsibility Principle.*</sub>|<br/><br/>

Uncle Bob defines *responsibility* as a *reason to change*, and he suggests breaking down components such as classes, modules, and methods until each has a **single reason** to change. 

Why do we need to do this, and *what benefits will be gained* by breaking a component into subcomponents where each must have a single responsibility? The idea is that each class or method is responsible for a single part of the product's functionality, i.e., each class or method does just **one job**. This *keeps the design as simple as possible* and makes it easier and less disruptive to make changes in the future. Furthermore, it improves the quality of the codebase in general.

What if our class has multiple responsibilities to fulfill? A class with multiple responsibilities has a higher chance of having bugs since altering one of those responsibilities might have unintended effects (side-effects) on the others. 

Having said that, utilising SRP principle makes code easier to maintain and test.

## Motivation